## Copyright (C) 2013 University of Nebraska Board of Regents.
## Written by Bradley Worley <bradley.worley@huskers.unl.edu>.
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; If not, see <http://www.gnu.org/licenses/>.

## -*- texinfo -*-
## @anchor{permdensity}
## @deftypefn {Function File} {} permdensity (@var{S})
## Plots information in @var{S} that has been calculated by @ref{permtest},
## using kernel density estimation to reconstruct the null distributions
## generated by permutation.
## @end deftypefn

function Sadd = permdensity (S)
  % check for proper arguments.
  if (nargin != 1 || !isstruct(S))
    % improper arguments. print the usage statement.
    print_usage();
  end

  % set the expansion parameter.
  expand = 0.4;

  % set the number of density axis values.
  n = 256;

  % get the min and max of the R-squared values.
  Rrange = range(S.Rsq.perm);
  Rmin = min(S.Rsq.perm);
  Rmax = max(S.Rsq.perm);

  % get the min and max of the Q-squared values.
  Qrange = range(S.Qsq.perm);
  Qmin = min(S.Qsq.perm);
  Qmax = max(S.Qsq.perm);

  % get the plot boundaries.
  xR = linspace(Rmin - expand * Rrange, Rmax + expand * Rrange, n)';
  xQ = linspace(Qmin - expand * Qrange, Qmax + expand * Qrange, n)';

  % construct kernel density estimates of the null distribution samples.
  yR = kernel_density(xR, S.Rsq.perm, Rrange / 20);
  yQ = kernel_density(xQ, S.Qsq.perm, Qrange / 20);

  % determine the plot x-boundaries.
  xmin = min([Rmin; Qmin; S.Rsq.orig; S.Qsq.orig]);
  xmax = 1;

  % determine if the user just wants some data computed, or a plot.
  if (nargout >= 1)
    % make a copy of the original structure.
    Sadd = S;

    % add the kernel density fields to the structure.
    Sadd.Rsq.dens = [xR, yR];
    Sadd.Qsq.dens = [xQ, yQ];
  else
    % build the legend strings.
    r2str = sprintf('R^2 (p = %.02e)', S.Rsq.p);
    q2str = sprintf('Q^2 (p = %.02e)', S.Qsq.p);
    legstr = {r2str, q2str};

    % build the x-axis label string.
    xstr = sprintf('R^2, Q^2: %d permutations, %d components', ...
                   S.n, S.A);

    % initialize the figure.
    figure();

    % plot the estimated R-squared density.
    subplot(2, 1, 1);
    title('Permutation test results');
    hold on;
    plot(xR, yR, 'color', [0, 0, 1]);

    % determine the plot y-axis range.
    ylimits = get(gca(), 'ylim');
    ymin = min(ylimits);
    ymax = max(ylimits);

    % plot the true R-squared value.
    plot([S.Rsq.orig; S.Rsq.orig], [ymin; ymax], ...
      'color', [0, 0, 1], 'linewidth', 4);

    % set the plot axis ranges.
    set(gca(), 'xlim', [Rmin, 1]);
    set(gca(), 'ylim', ylimits);

    % add a plot legend.
    legend({r2str}, 'location', 'northwest');

    % release the subplot.
    hold off;

    % ===

    % plot the estimated Q-squared density.
    subplot(2, 1, 2);
    hold on;
    plot(xQ, yQ, 'color', [0, 1, 0]);

    % determine the plot y-axis range.
    ylimits = get(gca(), 'ylim');
    ymin = min(ylimits);
    ymax = max(ylimits);

    % plot the true Q-squared value.
    plot([S.Qsq.orig; S.Qsq.orig], [ymin; ymax], ...
      'color', [0, 1, 0], 'linewidth', 4);

    % set the plot axis ranges.
    set(gca(), 'xlim', [Qmin, 1]);
    set(gca(), 'ylim', ylimits);

    % add a plot legend.
    legend({q2str}, 'location', 'northwest');

    % release the figure for plotting.
    hold off;

    % print the x-axis label.
    xlabel(xstr);
  end
end

