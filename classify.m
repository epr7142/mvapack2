## Copyright (C) 2013 University of Nebraska Board of Regents.
## Written by Bradley Worley <bradley.worley@huskers.unl.edu>.
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; If not, see <http://www.gnu.org/licenses/>.

## -*- texinfo -*-
## @anchor{classify}
## @deftypefn {Function File} {@var{Y} =} classify (@var{mdl}, @var{X})
## @deftypefnx {Function File} {[@var{Y}, @var{T}] =} classify (@var{mdl}, @var{X})
## Predicts responses @var{Y} from one or more observations @var{X} based on
## the discriminant analysis model @var{mdl}. Any model that contains a
## class matrix of the format generated by @ref{classes} should support
## classification of new observations.
##
## An optional second return value (@var{T}) may be requested that holds
## transformed scores for the new observations.
## @end deftypefn

function [Y, T] = classify (mdl, X)
  % check the type of arguments.
  if (nargin != 2 || !any(nargout == [1 : 2]) || ...
      !isstruct(mdl) || !ismatrix(X))
    % invalid arguments. throw an exception.
    print_usage();
  end

  % ensure the model is capable of scaling observations.
  if (!isfield(mdl, 'scaling') || ...
      !isfield(mdl, 'mean') || !isfield(mdl.mean, 'X') || ...
      !isfield(mdl, 'scale') || !isfield(mdl.scale, 'X'))
    % no scaling support. throw an exception.
    error('classify: model does not support scaling');
  end

  % ensure the model has a classifier function handle.
  if (!isfield(mdl, 'classifier'))
    % no classifier handle. throw an exception.
    error('classify: model does not support classification');
  end

  % see if we need to transpose X to match W and U.
  if (columns(X) != mdl.K)
    % yeah, something is up.
    if (rows(X) == mdl.K)
      % yes, reshape the matrix.
      X = X';
    else
      % even a transposition won't fix the issue. invalid size.
      error('classify: invalid observation matrix size');
    end
  end

  % scale the observations down based on the training dataset.
  Xs = (X - ones(rows(X), 1) * mdl.mean.X) * diag(1 ./ mdl.scale.X);

  % run the classification function on the scaled observations.
  if (nargout >= 2)
    % the user requested scores as well.
    [Y, T] = mdl.classifier(mdl, Xs);
  else
    % the user requested only classes.
    Y = mdl.classifier(mdl, Xs);
  end
end

